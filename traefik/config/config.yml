# http routing section
http:
  routers:
    # Define a connection between requests and services
    sentry:
      rule: "Host(`sentry.miaotai.com`)"
      middlewares:
        - sentry
      service: sentry
    telcom:
      rule: "Host(`telcom.huahuazi.com`)"
      service: telcom
    hw-router:
      rule: "Host(`router.miaotai.com`)"
      service: hw-router
    hasura:
      rule: "Host(`hasura.miaotai.com`)"
      service: hasura
      tls: true
    tracing:
      rule: "Host(`tracing.miaotai.com`) && PathPrefix(`/auth/`, `/api/`, `/_static/`)"
      middlewares:
        - sentry
        - cors
      service: sentry
    tracing-ui:
      rule: "Host(`tracing.miaotai.com`)"
      middlewares:
        - sentry
      service: tracing
    # countly-frontend:
    #   rule: "Host(`countly.miaotai.com`)"
    #   service: countly-frontend
    # countly-api:
    #   rule: "Host(`countly.miaotai.com`) && (PathPrefix(`/i/`, `/o/`) || Path(`/i`, `/o`))"
    #   service: countly-api
    # preview-server:
    #   rule: "HostRegexp(`preview.miaotai.com`, `{subdomain:[a-z0-9]+}.preview.miaotai.com`)"
    #   service: preview-server
    parse:
      rule: "Host(`parse.miaotai.com`)"
      service: parse
    parse-dashboard:
      rule: "Host(`parse-dashboard.miaotai.com`)"
      service: parse-dashboard
    app-smith:
      rule: "Host(`app-smith.miaotai.com`)"
      service: app-smith
    spa:
      rule: "Host(`spa.miaotai.com`)"
      service: preview-server
    auth-server:
      rule: "Host(`sso.miaotai.com`) || Host(`a.miaotai.com`) || Host(`b.miaotai.org`)"
      service: preview-server
  services:
    preview-server:
      loadBalancer:
        servers:
          - url: "http://host.docker.internal:4000"
    countly-frontend:
      loadBalancer:
        servers:
          - url: http://countly-frontend:6001
    countly-api:
      loadBalancer:
        servers:
          - url: http://countly-api:3001
    tracing:
      loadBalancer:
        servers:
          - url: http://host.docker.internal:8000
    # Define how to reach an existing service on our infrastructure
    frp:
      loadBalancer:
        servers:
          - url: http://101.32.4.114
    hasura:
      loadBalancer:
        servers:
          # - url: http://host.docker.internal:8080 #dev
          - url: http://172.28.19.61
    hw-router:
      loadBalancer:
        servers:
          - url: http://192.168.101.1
    telcom:
      loadBalancer:
        servers:
          - url: http://192.168.1.1
    sentry:
      loadBalancer:
        servers:
          - url: http://sentry.xrxr.xyz
    parse-dashboard:
      loadBalancer:
        servers:
          - url: http://config-master-dashboard:4040
    parse:
      loadBalancer:
        servers:
          - url: http://config-master:1337
    app-smith:
      loadBalancer:
        servers:
          - url: http://appsmith
  middlewares:
    to-https:
      redirectScheme:
        scheme: "https"
    sentry:
      headers:
        customRequestHeaders:
          host: sentry.xrxr.xyz
    cors:
      headers:
        customResponseHeaders:
          accessControlAllowOriginList:
            - http://tracing.miaotai.com
tls:
  certificates:
    - certFile: /certs/cert.pem
      keyFile: /certs/key.pem
